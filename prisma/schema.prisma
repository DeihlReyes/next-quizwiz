// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  quizResults   QuizResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id        String       @id @default(cuid())
  title     String
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  results   QuizResult[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Question {
  id            String       @id @default(cuid())
  text          String
  options       String[]
  correctAnswer String
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuizAnswer[]
}

model QuizResult {
  id             String       @id @default(cuid())
  score          Float
  correctAnswers Int
  totalQuestions Int
  timeTaken      Int
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId         String
  quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        QuizAnswer[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model QuizAnswer {
  id             String     @id @default(cuid())
  questionId     String
  question       Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizResultId   String
  quizResult     QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  selectedOption String
  isCorrect      Boolean
}
